@page "/edit-form5"
@using BlazorSampleProject.Models
@using System.Data.Entity

<h1>EditFormサンプル（CustomValidatorを使用したチェック）</h1>

<EditForm EditContext="@editContext" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator/>
    <CustomValidator @ref="customValidator" />
    <ValidationSummary />
    <div class="row">
        <div class="col-3">
            <div class="form-group">
                <label>名前</label>
                <InputText class="form-control" @bind-Value="@model.Name"/>
            </div>
        </div>
        <div class="col-3">
            <div class="form-group">
                <label>誕生日</label>
                <InputDate id="Birthday" class="form-control" @bind-Value="@model.Birthday"/>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-3">
            <div class="form-group">
                <label>年齢</label>
                <InputNumber class="form-control" @bind-Value="@model.Age"/>
            </div>
        </div>
        <div class="col-3">
            <div class="form-group">
                <label>性別</label>
                <InputRadioGroup class="form-control" @bind-Value="@model.GenderType">
                    @foreach (GenderType value in Enum.GetValues(typeof(GenderType)))
                    {
                        <br/>
                        <InputRadio Value="@value"/>@value.GetDisplayName()
                    }
                </InputRadioGroup>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-3">
            <div class="form-group">
                <label>プロフィール</label>
                <InputTextArea class="form-control" @bind-Value="@model.Profile"/>
            </div>
        </div>
        <div class="col-3">
            <div class="form-group">
                <label>都道府県</label>
                <InputSelect class="form-control" @bind-Value="@model.Prefecture">
                    @foreach (Prefecture value in Enum.GetValues(typeof(Prefecture)))
                    {
                        <option Value="@value">@value.GetDisplayName()</option>
                    }
                </InputSelect>
            </div>
        </div>
        <div class="col-3">
            <div class="form-group">
                <label>画像</label>
                <InputFile class="form-control" OnChange="LoadFile" multiple/>
                <span>ファイル数：@fileCount</span>
            </div>
        </div>

    </div>
    <button type="submit" class="btn btn-primary" disabled="@formInvalid">登録</button>
</EditForm>

<p style="margin-top: 20px;">
        @resultMessage
</p>

@code {
    private CustomValidator customValidator;

    private FormViewModel model = new FormViewModel();

    private string resultMessage;
    private bool isSuccess = false;
    private int fileCount = 0;
    private EditContext editContext;
    private bool formInvalid = true;    // ボタンの制御を行う

    protected override void OnInitialized()
    {
        editContext = new EditContext(model);
        editContext.OnFieldChanged += (s, e) =>
        {
            formInvalid = !editContext.Validate();   
        };
    }

    private void OnValidSubmit()
    {
        customValidator.ClearErrors();
        var errors = new Dictionary<string, List<string>>();
        if (model.Birthday >= DateTime.Today)
        {
                errors.Add("Birthday", new List<string>() { "誕生日は未来日の入力できません（submit check）" });
        }

        if (errors.Count > 0)
        {
            customValidator.DisplayErrors(errors);
        }
        else
        {
            isSuccess = true;
            resultMessage = "登録完了！";
        }


    }
    private void LoadFile(InputFileChangeEventArgs e)
    {
        //InputFileChangeEventArgs ev = (InputFileChangeEventArgs)e;
        fileCount = e.FileCount;
    }

}
