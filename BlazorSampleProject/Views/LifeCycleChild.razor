<h3>LifeCycleChild</h3>

@foreach (var item in eventList)
{
    <span>@item</span>
    <br />
}

@code {
    [Parameter]
    public int Count { get; set; }

    private List<string> eventList = new List<string>();

    public override Task SetParametersAsync(ParameterView parameters)
    {
        if (parameters.TryGetValue<int>(nameof(Count), out var value))
        {
            if (value == null)
            {
                eventList.Add("SetParametersAsync");
            }
            else
            {
                eventList.Add($"SetParametersAsync - with parameter : {value}");
            }
        }

        return base.SetParametersAsync(parameters);
    }

    protected override void OnInitialized()
    {
        eventList.Add("OnInitialized");
    }

    protected override Task OnInitializedAsync()
    {
        eventList.Add("OnInitializedAsync");
        return base.OnInitializedAsync();
    }

    protected override void OnParametersSet()
    {
        eventList.Add("OnParametersSet");
        base.OnParametersSet();
    }

    protected override Task OnParametersSetAsync()
    {
        eventList.Add("OnParametersSetAsync");
        return base.OnParametersSetAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        eventList.Add("OnAfterRender");
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        eventList.Add("OnAfterRenderAsync");

        return base.OnAfterRenderAsync(firstRender);
    }

}
